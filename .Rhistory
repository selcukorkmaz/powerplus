p_list[[i]] <- p_list2
}
names(p_list) <- n1
# Create result data frame
res <- data.frame(
"n1" = rep(as.numeric(names(p_list)), each = length(p_list[[1]][[1]])),
"Effect_Size" = rep(as.numeric(names(p_list[[1]][[1]])), times = length(p_list)),
"Alpha" = as.numeric(names(p_list[[1]])),
"Actual_Power" = as.numeric(unlist(p_list)),
stringsAsFactors = FALSE
)
if (type == "two.sample") {
res$n2 <- n2
res$n <- res$n1 + res$n2
} else {
res$n <- res$n1
}
# Adjust for dropout rate if applicable
if (drop > 0) {
res$Dropout_Rate <- drop
res$`n1'` <- ceiling(res$n1 / (1 - drop))
if (type == "two.sample") {
res$`n2'` <- ceiling(res$n2 / (1 - drop))
res$`n'` <- res$`n1'` + res$`n2'`
} else {
res$`n'` <- res$`n1'`
}
}
# Adjust n1 and n2 if it's a two-sample test
if (type == "two.sample") {
if (ratio == 1) {
# Adjust n' to be even where necessary
odd_indices <- which(res$`n'` %% 2 != 0)
res$`n'`[odd_indices] <- res$`n'`[odd_indices] + 1
res$n1 <- res$`n'` / 2
res$n2 <- res$`n'` / 2
} else if (ratio >= 1) {
r2 <- ratio
r1 <- 1
res$n1 <- round(res$`n'` / (r1 + r2) * r1)
res$n2 <- res$`n'` - res$n1
} else {
r2 <- 1
r1 <- 1 / ratio
res$n2 <- round(res$`n'` / (r1 + r2) * r2)
res$n1 <- res$`n'` - res$n2
}
}
}
# When d is NULL, calculate effect size given n and power
else if (is.null(d)) {
d_list <- list()
for (i in seq_along(n1)) {
d_list2 <- list()
for (j in seq_along(power)) {
d_list3 <- list()
for (k in seq_along(alpha)) {
if (type == "two.sample") {
d_list3[[k]] <- power_t_test(
n1 = n1[i],
n2 = n2[i],
d = NULL,
power = power[j],
alpha = alpha[k],
type = type,
tail= tail,
sd1 = sd1,
sd2 = sd2,
population = population
)
} else {
d_list3[[k]] <- power_t_test(
n1 = n1[i],
n2 = NULL,
d = NULL,
power = power[j],
alpha = alpha[k],
type = type,
tail= tail,
sd1 = sd1,
sd2 = sd2,
population = population
)
}
}
names(d_list3) <- alpha
d_list2[[j]] <- d_list3
}
names(d_list2) <- power
d_list[[i]] <- d_list2
}
names(d_list) <- n1
# Create result data frame
res <- data.frame(
"n1" = rep(as.numeric(names(d_list)), each = length(d_list[[1]][[1]])),
"Target_Power" = rep(as.numeric(names(d_list[[1]])), times = length(d_list)),
"Alpha" = as.numeric(names(d_list[[1]][[1]])),
"Effect_Size" = as.numeric(unlist(d_list)),
stringsAsFactors = FALSE
)
if (type == "two.sample") {
res$n2 <- n2
res$n <- res$n1 + res$n2
} else {
res$n <- res$n1
}
# Adjust for dropout rate if applicable
if (drop > 0) {
res$Dropout_Rate <- drop
res$`n1'` <- ceiling(res$n1 / (1 - drop))
if (type == "two.sample") {
res$`n2'` <- ceiling(res$n2 / (1 - drop))
res$`n'` <- res$`n1'` + res$`n2'`
} else {
res$`n'` <- res$`n1'`
}
}
# Calculate actual power with adjusted sample sizes
res$Actual_Power <- res$Target_Power
}
# When alpha is NULL, calculate alpha given n, d, and power
else if (is.null(alpha)) {
a_list <- list()
for (i in seq_along(n1)) {
a_list2 <- list()
for (j in seq_along(power)) {
a_list3 <- list()
for (k in seq_along(d)) {
if (type == "two.sample") {
a_list3[[k]] <- power_t_test(
n1 = n1[i],
n2 = n2[i],
d = d[k],
power = power[j],
alpha = NULL,
type = type,
tail= tail,
sd1 = sd1,
sd2 = sd2,
population = population
)
} else {
a_list3[[k]] <- power_t_test(
n1 = n1[i],
n2 = NULL,
d = d[k],
power = power[j],
alpha = NULL,
type = type,
tail= tail,
sd1 = sd1,
sd2 = sd2,
population = population
)
}
}
names(a_list3) <- d
a_list2[[j]] <- a_list3
}
names(a_list2) <- power
a_list[[i]] <- a_list2
}
names(a_list) <- n1
# Create result data frame
res <- data.frame(
"n1" = rep(as.numeric(names(a_list)), each = length(a_list[[1]][[1]])),
"Target_Power" = rep(as.numeric(names(a_list[[1]])), times = length(a_list)),
"Effect_Size" = rep(as.numeric(names(a_list[[1]][[1]])), times = length(a_list) * length(a_list[[1]])),
"Alpha" = as.numeric(unlist(a_list)),
stringsAsFactors = FALSE
)
if (type == "two.sample") {
res$n2 <- n2
res$n <- res$n1 + res$n2
} else {
res$n <- res$n1
}
# Adjust for dropout rate if applicable
if (drop > 0) {
res$Dropout_Rate <- drop
res$`n1'` <- ceiling(res$n1 / (1 - drop))
if (type == "two.sample") {
res$`n2'` <- ceiling(res$n2 / (1 - drop))
res$`n'` <- res$`n1'` + res$`n2'`
} else {
res$`n'` <- res$`n1'`
}
}
# Calculate actual power with adjusted sample sizes
res$Actual_Power <- res$Target_Power
}
# Plotting code
if (plot) {
side = ifelse(tail == "two", "Two-sided", "One-sided")
if (is.null(power) && !is.null(n1)) {
title = "Power vs Effect Size by Alpha"
p <- ggplot(data = res) +
geom_line(aes(x = `Effect_Size`, y = `Actual_Power`, col = as.factor(Alpha))) +
geom_point(aes(x = `Effect_Size`, y = `Actual_Power`, col = as.factor(Alpha))) +
labs(title = title,
x = "Effect Size",
y = "Power",
color = "Alpha") +
theme_minimal()
} else if (is.null(d)) {
title = "Effect Size vs n by Power and Alpha"
p <- ggplot(data = res) +
geom_line(aes(x = n, y = `Effect_Size`, col = as.factor(Alpha))) +
geom_point(aes(x = n, y = `Effect_Size`, col = as.factor(Alpha))) +
labs(title = title,
x = "Sample Size (n)",
y = "Effect Size",
color = "Alpha") +
facet_grid(~ `Target_Power`) +
theme_minimal()
} else if (is.null(alpha)) {
title = "Alpha vs n by Power and Effect Size"
p <- ggplot(data = res) +
geom_line(aes(x = n, y = Alpha, col = as.factor(`Effect_Size`))) +
geom_point(aes(x = n, y = Alpha, col = as.factor(`Effect_Size`))) +
labs(title = title,
x = "Sample Size (n)",
y = "Alpha",
color = "Effect Size") +
facet_grid(~ `Target_Power`) +
theme_minimal()
} else {
title = ifelse(length(unique(res$`Effect_Size`)) > 1,
"Power vs n by Alpha and Effect Size",
"Power vs n by Alpha")
if (length(unique(res$`Effect_Size`)) > 1) {
res$`Effect_Size` = as.numeric(as.character(res$`Effect_Size`))
res$`Effect_Size` = round(res$`Effect_Size`, 2)
p <- ggplot(data = res) +
geom_line(aes(x = n, y = `Actual_Power`, col = as.factor(Alpha))) +
geom_point(aes(x = n, y = `Actual_Power`, col = as.factor(Alpha))) +
labs(title = title,
x = "Sample Size (n)",
y = "Power",
color = "Alpha") +
facet_grid(~ `Effect_Size`) +
theme_minimal()
} else {
p <- ggplot(data = res) +
geom_line(aes(x = n, y = `Actual_Power`, col = as.factor(Alpha))) +
geom_point(aes(x = n, y = `Actual_Power`, col = as.factor(Alpha))) +
labs(title = title,
x = "Sample Size (n)",
y = "Power",
color = "Alpha") +
theme_minimal()
}
}
# Add population size reference line if specified
if (!is.null(population)) {
p <- p + geom_vline(xintercept = population,
linetype = "dashed",
color = "red",
alpha = 0.5) +
annotate("text",
x = population,
y = 0,
label = "Population Size",
vjust = -0.5,
angle = 90,
color = "red",
alpha = 0.5)
}
p <- p + theme(legend.position = "bottom") +
scale_y_continuous(limits = c(0, NA))
print(p)
}
# Printing the details
if (is.null(n1)) {
cat("Solve For ...........................", bold("Sample Size"), "\n")
} else if (!is.null(alpha) & !is.null(power) & is.null(d)) {
cat("Solve For ...........................", bold("Effect Size"), "\n")
} else if (is.null(alpha)) {
cat("Solve For ...........................", bold("Alpha"), "\n")
} else if (is.null(power) && !is.null(n1)) {
cat("Solve For ...........................", bold("Power"), "\n")
} else if (is.null(d)) {
cat("Solve For ...........................", bold("Effect Size"), "\n")
} else {
cat("Solve For ...........................", bold("Power"), "\n")
}
if (type == "one.sample") {
cat("Test ................................", bold("One-Sample t-Test"), "\n")
}
if (type == "two.sample") {
cat("Test ................................", bold("Two-Samples t-Test"), "\n")
}
if (type == "paired") {
cat("Test ................................", bold("Paired-Samples t-Test"), "\n")
}
if (tail == "two") {
if (type == "one.sample") {
cat("Alternative Hypothesis ..............",
bold("Two-Sided (H1: μ ≠ μ₀)"), "\n")
}
if (type != "one.sample") {
cat("Alternative Hypothesis ..............",
bold("Two-Sided (H1: μ₁ ≠ μ₂)"), "\n")
}
}
if (tail == "one") {
if (type == "one.sample") {
cat("Alternative Hypothesis ..............",
bold("One-Sided (H1: μ > μ₀)"), "\n")
}
if (type != "one.sample") {
cat("Alternative Hypothesis ..............",
bold("One-Sided (H1: μ₁ > μ₂)"), "\n")
}
}
if (drop > 0) {
cat("Dropout Rate ........................", bold(paste0(drop * 100, "%")), "\n")
}
if (!is.null(power)) {
cat("Power ...............................", bold(power), "\n")
}
if (!is.null(alpha)) {
cat("Alpha ...............................", bold(alpha), "\n")
}
if (!is.null(n1)) {
cat("n (Sample Size) .....................", bold(n), "\n")
}
if (!is.null(d)) {
cat("Effect size .........................", bold(d), "\n")
}
if (!is.null(population)) {
cat("Population Size .....................", bold(population), "\n")
}
if (type == "two.sample") {
cat("SD group 1 ..........................", bold(sd1), "\n")
if (!is.null(sd2)) {
cat("SD group 2 ..........................", bold(sd2), "\n")
}
}
if (type == "two.sample" & is.null(n1)) {
cat("Allocation ratio (n2/n1) ............", bold(ratio), "\n")
}
cat(".............................................................\n")
cat("\n")
# Final messages
if (!is.null(power) & is.null(n1)) {
if (nrow(res) == 1) {
if (drop > 0) {
cat(bold("The required total sample size, n' =", res$`n'`), "\n")
if (type == "two.sample") {
cat(bold("This includes an adjustment for a", paste0(drop * 100, "%"), "dropout rate."), "\n")
cat(bold("Group sizes: n1 =", res$`n1'`, "and n2 =", res$`n2'`), "\n")
} else {
cat(bold("This includes an adjustment for a", paste0(drop * 100, "%"), "dropout rate."), "\n")
}
} else {
cat(bold("The required total sample size, n =", res$n), "\n")
if (type == "two.sample") {
cat(bold("Group sizes: n1 =", res$n1, "and n2 =", res$n2), "\n")
}
}
cat("\n")
} else {
cat(bold("Please see table for results."), "\n")
cat("\n")
}
} else if (!is.null(alpha) & !is.null(power) & is.null(d)) {
if (nrow(res) == 1) {
cat(bold("The effect size, d =", res$`Effect_Size`), "\n")
cat("\n")
} else {
cat(bold("Please see table for results."), "\n")
cat("\n")
}
} else if (is.null(alpha)) {
if (nrow(res) == 1) {
cat(bold("The alpha level, alpha =", res$Alpha), "\n")
cat("\n")
} else {
cat(bold("Please see table for results."), "\n")
cat("\n")
}
} else if (is.null(d)) {
if (nrow(res) == 1) {
cat(bold("The effect size, d =", res$`Effect_Size`), "\n")
cat("\n")
} else {
cat(bold("Please see table for results."), "\n")
cat("\n")
}
} else {
if (nrow(res) == 1) {
cat(bold("The actual power of the test, p =", res$`Actual_Power`), "\n")
cat("\n")
} else {
cat(bold("Please see table for results."), "\n")
cat("\n")
}
}
# Remove columns with all NA values before returning
res <- res[, colSums(is.na(res)) < nrow(res)]
return(res)
}
# Example 1: Basic two-sample t-test with single effect size
rpower_t_test(
d = 0.5,                    # Medium effect size
power = c(0.8),               # Standard power
alpha = c(0.05),
n1 =NULL,
n2=NULL,
type = "paired",
tail = "two",
drop = 0,
ratio=2,
plot = T,
population = NULL,
sd1 = 1,
sd2 = NULL
)
# Example parameters for a paired t-test
effect_size <- 0.5    # Cohen's d
desired_power <- 0.8  # 80% power
alpha_level <- 0.05   # Significance level
# Calculate required sample size
result <- power_t_test(
d = effect_size,
power = desired_power,
alpha = alpha_level,
type = "paired",
tail = "two"  # or "one" for one-tailed tests
)
print(result)
# Power at n = 34
power_n34 <- with(list(n = 34, d = 0.5, alpha = 0.05, type = "paired", tail = "two"), {
df <- n - 1
ncp <- sqrt(n) * d
ta <- qt(alpha / 2, df, lower = FALSE)
pt(ta, df, ncp = ncp, lower = FALSE) + pt(-ta, df, ncp = ncp, lower = TRUE)
})
# Power at n = 35
power_n35 <- with(list(n = 35, d = 0.5, alpha = 0.05, type = "paired", tail = "two"), {
df <- n - 1
ncp <- sqrt(n) * d
ta <- qt(alpha / 2, df, lower = FALSE)
pt(ta, df, ncp = ncp, lower = FALSE) + pt(-ta, df, ncp = ncp, lower = TRUE)
})
print(power_n34)
print(power_n35)
total_n <- ceiling(res + 1e-6)
total_n =35
while (TRUE) {
current_power <- with(list(n = ceiling(total_n), d = d, alpha = alpha, type = type, tail = tail), {
df <- n - 1
ncp <- sqrt(n) * d
ta <- qt(alpha / 2, df, lower = FALSE)
pt(ta, df, ncp = ncp, lower = FALSE) + pt(-ta, df, ncp = ncp, lower = TRUE)
})
if (current_power >= power) {
break
}
total_n <- total_n + 1
}
d = 0.5                    # Medium effect size
power = c(0.8)              # Standard power
alpha = c(0.05)
n1 =NULL
n2=NULL# Standard alpha
type = "paired"
tail = "two"
drop = 0
ratio=2
plot = T
population = NULL
sd1 = 1
sd2 = NULL
while (TRUE) {
current_power <- with(list(n = ceiling(total_n), d = d, alpha = alpha, type = type, tail = tail), {
df <- n - 1
ncp <- sqrt(n) * d
ta <- qt(alpha / 2, df, lower = FALSE)
pt(ta, df, ncp = ncp, lower = FALSE) + pt(-ta, df, ncp = ncp, lower = TRUE)
})
if (current_power >= power) {
break
}
total_n <- total_n + 1
}
list(n1 = ceiling(total_n), n2 = NULL, n = ceiling(total_n))
library(pwr)
install.packages("pwer")
install.packages("pwr")
library(pwr)
# Perform power analysis for paired t-test
pwr_result <- pwr.t.test(
d = 0.5,
power = 0.8,
sig.level = 0.05,
type = "paired",
alternative = "two.sided"
)
print(pwr_result)
ceiling(33.36713)
library(pwr)
# Perform power analysis for paired t-test
pwr_result <- pwr.t.test(
d = 0.5,
power = 0.8,
sig.level = 0.05,
type = "one.sample",
alternative = "two.sided"
)
print(pwr_result)
